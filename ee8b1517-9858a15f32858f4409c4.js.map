{"version":3,"file":"ee8b1517-9858a15f32858f4409c4.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.4.4\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.4\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","this","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","r","call","window","_update","Date","now","remaining","running","items","length","item","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","e","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animation","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","$shared","assign","$animations","resolveTargetOptions","animations","_createAnimations","anim","all","awaitAll","then","props","charAt","value","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","s","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","id","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","iAxisKey","vAxisKey","adata","Array","convertObjectDataToArray","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","t","b","top","right","bottom","left","disabled","toClip","clip","defaultClip","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","parent","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","showLine","spanGaps","_index_","_value_","super","line","points","_dataset","animationsDisabled","_datasetIndex","_decimated","borderWidth","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","point","skip","nullData","iPixel","getPixelForValue","vPixel","getBasePixel","isNaN","abs","border","firstPoint","lastPoint","updateControlPoints","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","indexOf","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestItems","startAngle","endAngle","getProps","angle","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","sort","a","v0","v1","weight","setLayoutDims","layouts","params","wrap","stackWeight","includes","_stack","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","width","availableWidth","height","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","getMargins","marginForPositions","positions","margin","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","display","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","canvas","aspectRatio","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","proxy","native","fromNativeEvent","addListener","DomPlatform","style","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","ret","autoSkip","ticks","tickOpts","determinedMaxTicks","offset","tickLength","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","result","getMajorIndices","numMajorIndices","first","last","newTicks","spacing","next","ceil","skipMajors","evenMajorSpacing","len","diff","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","round","majorStart","majorEnd","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","epsilon","lineValue","getPixelForTick","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","text","lineHeight","titleAlign","align","reverseAlign","Scale","_margins","maxWidth","maxHeight","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","beginAtZero","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","name","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","grid","title","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","cos","sin","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","gcLen","garbageCollect","valueAt","idx","getValueForPixel","pixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineWidth","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","rotation","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","backdrop","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","backgroundColor","save","fillStyle","fillRect","restore","getLineWidthForValue","findIndex","drawGrid","drawLine","p1","p2","strokeStyle","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","H","titleArgs","tz","gz","bz","prototype","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","Error","itemDefaults","defaults","defaultRoutes","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","routeDefaults","descriptors","describe","registerDefaults","overrides","unregister","Registry","controllers","plugins","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","local","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","obj","Config","_config","initConfig","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","isScriptable","isIndexable","hasFunction","needContext","subResolver","descriptorDefaults","resolverCache","p","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","map","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","offsetX","offsetY","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","lastEvent","determineLastEvent","onHover","onClick","setStyle","lineCap","borderCapStyle","lineJoin","borderJoinStyle","borderColor","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","getLineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","usePath2D","Path2D","path","_path","closePath","strokePathWithCache","segments","segmentMethod","strokePathDirect","LineElement","capBezierPoints","_scriptable","_indexable","_fullLoop","_points","_segments","_pointsUpdated","interpolate","_interpolate","_getInterpolationMethod","interpolated","inRange$1","radius","hitRadius","PointElement","hoverBorderWidth","hoverRadius","pointStyle","mouseX","mouseY","inXRange","inYRange","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","textWidth","setWidth","lineDash","drawOptions","SQRT2","centerX","xPlus","centerY","yBoxTop","xBoxLeft","borderRadius","rect","drawLegendBox","strikethrough","fillText","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","sameItem","plugin_legend","_element","_args","legend","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","P","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","base","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","topLeft","topRight","bottomLeft","bottomRight","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","numbers","_fallback","findOrAddLabel","addedLabels","unshift","addIfString","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","bounds","relativeLabelSize","minSpacing","rad","ratio","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","decimalPlaces","tickValue","generateTicks$1","locale","format","LinearScale","formatters","numeric","logarithmic"],"sourceRoot":""}